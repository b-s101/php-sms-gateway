<?php
    /**
     * Authenticate a user against a password file generated by Apache's httpasswd
     * using PHP rather than Apache itself.
     *
     * @param string $user The submitted user name
     * @param string $pass The submitted password
     * @param string $pass_file='.htpasswd' The system path to the htpasswd file
     * @param string $crypt_type='DES' The crypt type used to create the htpasswd file
     * @return bool
     */
     
    function crypt_apr1_md5($plainpasswd) {
    	$salt = substr(str_shuffle("abcdefghijklmnopqrstuvwxyz0123456789"), 0, 8);
   		$len = strlen($plainpasswd);
    	$text = $plainpasswd.'$apr1$'.$salt;
    	$bin = pack("H32", md5($plainpasswd.$salt.$plainpasswd));
    	for($i = $len; $i > 0; $i -= 16) { $text .= substr($bin, 0, min(16, $i)); }
    	for($i = $len; $i > 0; $i >>= 1) { $text .= ($i & 1) ? chr(0) : $plainpasswd{0}; }
    	$bin = pack("H32", md5($text));
    	for($i = 0; $i < 1000; $i++) {
      		$new = ($i & 1) ? $plainpasswd : $bin;
        	if ($i % 3) $new .= $salt;
        	if ($i % 7) $new .= $plainpasswd;
        	$new .= ($i & 1) ? $bin : $plainpasswd;
        	$bin = pack("H32", md5($new));
    	}
    	for ($i = 0; $i < 5; $i++) {
        	$k = $i + 6;
        	$j = $i + 12;
        	if ($j == 16) $j = 5;
        	$tmp = $bin[$i].$bin[$k].$bin[$j].$tmp;
    	}
    	$tmp = chr(0).chr(0).$bin[11].$tmp;
    	$tmp = strtr(strrev(substr(base64_encode($tmp), 2)),
    		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    		"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    	return "$"."apr1"."$".$salt."$".$tmp;
	}

     
    function http_authenticate($user,$pass,$pass_file='/var/apipasswd',$crypt_type='DES'){
        // the stuff below is just an example useage that restricts
        // user names and passwords to only alpha-numeric characters.
        //if(!ctype_alnum($user)){
            // invalid user name
        //    return FALSE;
        //}
        
        //if(!ctype_alnum($pass)){
            // invalid password
        //    return FALSE;
        //}
        
        // get the information from the htpasswd file
        if(file_exists($pass_file) && is_readable($pass_file)){
            //echo 'the password file exists, open it <br>';
            if($fp=fopen($pass_file,'r')){
                while($line=fgets($fp)){
                    // for each line in the file remove line endings
                    $line=preg_replace('`[\r\n]$`','',$line);
                    list($fuser,$fpass)=explode(':',$line);
                    if($fuser==$user){
                        //echo 'the submitted user name matches this line ';
                        //echo 'in the file <br>';
                        switch($crypt_type){
                            case 'DES':
                                // the salt is the first 2
                                // characters for DES encryption
                                $salt=substr($fpass,0,2);
                                //echo $salt . '<br>';
                                // use the salt to encode the
                                // submitted password
                                $test_pw=crypt($pass,$salt);
                                //echo $test_pw . '<br>';
                                break;
                            case 'PLAIN':
                                $test_pw=$pass;
                                break;
                            case 'SHA':
                            case 'MD5':
                            	//$test_pw=crypt_apr1_md5($fpass);
                            	//break;
                            default:
                                //echo 'unsupported crypt type <br>';
                                fclose($fp);
                                return FALSE;
                        }
                        if($test_pw == $fpass){
                            //echo 'authentication success <br>';
                            fclose($fp);
                            return TRUE;
                        }else{
                            return FALSE;
                            //echo $test_pw;
                        }
                    }
                }
                fclose($fp);
            }else{
                //echo 'could not open the password file <br>';
                return FALSE;
            }
        }else{
            return FALSE;
        }
    }
?>